name: CI
on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    steps:
    - uses: n1hility/cancel-previous-runs@v2
      with: 
        token: ${{ secrets.GITHUB_TOKEN }}
        workflow: synced-main.yml
      
  unit-tests:    
    # The type of runner that the job will run on
    runs-on: windows-latest
    name: Unit Tests
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Install VirtoCommerce.GlobalTool
      run: dotnet tool install --global VirtoCommerce.GlobalTool --version 1.0.0

    - name: Install dotnet-sonarscanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: SonarCloud Begin
      if: ${{ env.SONAR_TOKEN != 0 }}
      shell: pwsh
      env:
        PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
      run: |
        $repo = '${{ github.repository }}'.Substring(('${{ github.repository }}'.IndexOf('/')+1))
        $BRANCH='${{ github.ref }}'.Replace('refs/heads', '')
        $CMD="dotnet sonarscanner begin /k:'VirtoCommerce_$($repo)'"
        $CMD="$($CMD) /o:'virto-commerce'"
        $CMD="$($CMD) /d:sonar.cs.opencover.reportsPaths='$PWD/.tmp/coverage.xml'"
        $CMD="$($CMD) /d:sonar.host.url='https://sonarcloud.io'"
        $CMD="$($CMD) /d:sonar.login='${{ secrets.SONAR_TOKEN }}'"
        $CMD = "$($CMD) /d:sonar.branch='$($BRANCH)'"
        if ('${{ github.event_name }}' -eq 'pull_request' ) {
          $CMD="$($CMD) /d:sonar.pullrequest.base='$('${{ github.event.pull_request.base.ref }}')'"
          $CMD="$($CMD) /d:sonar.pullrequest.branch='$($env:PULL_REQUEST_TITLE)'"
          $CMD="$($CMD) /d:sonar.pullrequest.key=${{ github.event.number }}"
        }
        pwsh -command $CMD
    - name: Build
      run: vc-build Compile

    - name: Unit Tests
      run: vc-build Test -skip Restore+Compile

    - name: SonarCloud End
      if: ${{ env.SONAR_TOKEN != 0 }}
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      
  build-package:    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build Package
    outputs:
        path: ${{ steps.artifact-path.outputs.path }} 
        name: ${{ steps.artifact-path.outputs.name }} 

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Install VirtoCommerce.GlobalTool
      run: |
        dotnet tool install --global VirtoCommerce.GlobalTool --version 1.0.0
        mv Directory.Build.Props Directory.Build.props

    - name: Get Image Tag
      uses: VirtoCommerce/vc-github-actions/get-image-tag@master
      id: image
        
    - name: Build Package
      run: vc-build Compress -skip Test
    
    - name: Find Artifact Path
      id: artifact-path
      shell: pwsh
      run: |
        $file = Get-ChildItem -Path artifacts -Filter "*.zip" | Select-Object -First 1
        Write-Host "::set-output name=path::$($file.FullName)"
        Write-Host "::set-output name=name::${{ steps.image.outputs.tag }}"

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        path: ${{ steps.artifact-path.outputs.path }} 
        name: ${{ steps.artifact-path.outputs.name }} 

  publish:
    name: Publish image
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [build-package]
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2
        with:
          # Artifact name
          name: ${{needs.build-package.outputs.name}}
          # Destination path
          path: ${{needs.build-package.outputs.path}}

      - name: Upload a Build Artifact to Azure Blob Storage
        uses: fixpoint/azblob-upload-artifact@v3.3
        with:
          # Connection string
          connection-string: ${{ secrets.BLOB_STORAGE_CONNECTION_STRING }}
          # Artifact name
          name: .
          # Directory containing files to upload
          path: ${{needs.build-package.outputs.path}}
          # Container name
          container: artifacts # optional, default is github-action-artifacts
          # Remove all blobs under the target blob (use "true" to enable this option)
          cleanup: false # optional, default is false

      - name: Add tag "ver.${{ steps.image.outputs.tag }}"
        if: ${{ env.REPO_TOKEN != 0 && (github.ref == 'refs/heads/dev' || github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'testing')) }}
        uses: tvdias/github-tagger@v0.0.2
        env:
          REPO_TOKEN: ${{secrets.REPO_TOKEN}}
        with:
          repo-token: ${{ secrets.REPO_TOKEN }}
          tag: ver.${{ steps.image.outputs.tag }}
          # optional commit sha to apply the tag to
          commit-sha: ${{ steps.image.outputs.sha }}
